// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ResearchLinks.SpecTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProjectsAPIFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProjectsApi.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Projects API", "In order to perform CRUD operations on the projects\r\nAs a client of the Web Api\r\n" +
                    "I want to be able to Create, Update, Delete, and List projects", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Projects API")))
            {
                ResearchLinks.SpecTests.ProjectsAPIFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CreateANewProjectSavesPostedValues_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new project saves posted values - All Versions", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table1.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table1.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table1.AddRow(new string[] {
                        "UserName",
                        "james"});
            table1.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 7
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table1, "Given ");
#line 14
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.When("the client gets the project by header location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then(string.Format("the saved project matches the inputs for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new project saves posted values - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void CreateANewProjectSavesPostedValues_AllVersions_V1()
        {
            this.CreateANewProjectSavesPostedValues_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new project saves posted values - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void CreateANewProjectSavesPostedValues_AllVersions_V2()
        {
            this.CreateANewProjectSavesPostedValues_AllVersions("V2", ((string[])(null)));
        }
        
        public virtual void CreateANewProjectWhereIsUrgentIsMissingReturnsBadRequest_V2(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new project where IsUrgent is missing returns bad request - V2", exampleTags);
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table2.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table2.AddRow(new string[] {
                        "UserName",
                        "james"});
            table2.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 24
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table2, "Given ");
#line 30
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("a BadRequest status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new project where IsUrgent is missing returns bad request - V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void CreateANewProjectWhereIsUrgentIsMissingReturnsBadRequest_V2_V2()
        {
            this.CreateANewProjectWhereIsUrgentIsMissingReturnsBadRequest_V2("V2", ((string[])(null)));
        }
        
        public virtual void CreateANewProjectWithBadCredentialsReturnsUnauthorizedStatus_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new project With bad credentials returns Unauthorized status - All Versi" +
                    "ons", exampleTags);
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table3.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table3.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table3.AddRow(new string[] {
                        "UserName",
                        "james"});
            table3.AddRow(new string[] {
                        "Password",
                        "bogus"});
#line 37
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table3, "Given ");
#line 44
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("a Unauthorized status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new project With bad credentials returns Unauthorized status - All Versi" +
            "ons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void CreateANewProjectWithBadCredentialsReturnsUnauthorizedStatus_AllVersions_V1()
        {
            this.CreateANewProjectWithBadCredentialsReturnsUnauthorizedStatus_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new project With bad credentials returns Unauthorized status - All Versi" +
            "ons")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void CreateANewProjectWithBadCredentialsReturnsUnauthorizedStatus_AllVersions_V2()
        {
            this.CreateANewProjectWithBadCredentialsReturnsUnauthorizedStatus_AllVersions("V2", ((string[])(null)));
        }
        
        public virtual void CreateANewProjectWithNoCredentialsReturnsUnauthorizedStatus_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new project with no credentials returns Unauthorized status - All Versio" +
                    "ns", exampleTags);
#line 51
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table4.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table4.AddRow(new string[] {
                        "Description",
                        "Test Description"});
#line 52
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table4, "Given ");
#line 57
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("a Unauthorized status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new project with no credentials returns Unauthorized status - All Versio" +
            "ns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void CreateANewProjectWithNoCredentialsReturnsUnauthorizedStatus_AllVersions_V1()
        {
            this.CreateANewProjectWithNoCredentialsReturnsUnauthorizedStatus_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a new project with no credentials returns Unauthorized status - All Versio" +
            "ns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void CreateANewProjectWithNoCredentialsReturnsUnauthorizedStatus_AllVersions_V2()
        {
            this.CreateANewProjectWithNoCredentialsReturnsUnauthorizedStatus_AllVersions("V2", ((string[])(null)));
        }
        
        public virtual void GetProjectsContainsCreatedProject_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get projects contains created project - All Versions", exampleTags);
#line 64
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table5.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table5.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table5.AddRow(new string[] {
                        "UserName",
                        "james"});
            table5.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 65
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table5, "Given ");
#line 72
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.When("the client gets all projects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("the saved project should be in the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get projects contains created project - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void GetProjectsContainsCreatedProject_AllVersions_V1()
        {
            this.GetProjectsContainsCreatedProject_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get projects contains created project - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void GetProjectsContainsCreatedProject_AllVersions_V2()
        {
            this.GetProjectsContainsCreatedProject_AllVersions("V2", ((string[])(null)));
        }
        
        public virtual void GetProjectsDoesNotContainOtherUsersProjects_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get projects does not contain other users projects - All Versions", exampleTags);
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table6.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table6.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table6.AddRow(new string[] {
                        "UserName",
                        "james"});
            table6.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 83
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table6, "Given ");
#line 90
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Name",
                        "Test Project 2"});
            table7.AddRow(new string[] {
                        "Description",
                        "Test Description 2"});
            table7.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table7.AddRow(new string[] {
                        "UserName",
                        "john"});
            table7.AddRow(new string[] {
                        "Password",
                        "john2013"});
#line 92
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table7, "Given ");
#line 99
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.When("the client gets all projects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the saved project should be in the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get projects does not contain other users projects - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void GetProjectsDoesNotContainOtherUsersProjects_AllVersions_V1()
        {
            this.GetProjectsDoesNotContainOtherUsersProjects_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get projects does not contain other users projects - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void GetProjectsDoesNotContainOtherUsersProjects_AllVersions_V2()
        {
            this.GetProjectsDoesNotContainOtherUsersProjects_AllVersions("V2", ((string[])(null)));
        }
        
        public virtual void PutProjectSavesPutValuesAsEdited_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put project saves put values as edited - All Versions", exampleTags);
#line 108
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table8.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table8.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table8.AddRow(new string[] {
                        "UserName",
                        "james"});
            table8.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 109
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table8, "Given ");
#line 116
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
 testRunner.When("the client gets the project by header location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
 testRunner.Then(string.Format("the saved project matches the inputs for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Name",
                        "Test Project Edited"});
            table9.AddRow(new string[] {
                        "Description",
                        "Test Description Edited"});
            table9.AddRow(new string[] {
                        "IsUrgent",
                        "False"});
            table9.AddRow(new string[] {
                        "UserName",
                        "james"});
            table9.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 120
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table9, "Given ");
#line 127
 testRunner.When(string.Format("the client puts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.Then("a OK status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 129
 testRunner.When("the client gets the project by header location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 130
 testRunner.Then(string.Format("the saved project matches the inputs for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Put project saves put values as edited - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void PutProjectSavesPutValuesAsEdited_AllVersions_V1()
        {
            this.PutProjectSavesPutValuesAsEdited_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Put project saves put values as edited - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void PutProjectSavesPutValuesAsEdited_AllVersions_V2()
        {
            this.PutProjectSavesPutValuesAsEdited_AllVersions("V2", ((string[])(null)));
        }
        
        public virtual void PutProjectWhereIsUrgentIsMissingReturnsBadRequest_V2(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put project where IsUrgent is missing returns bad request - V2", exampleTags);
#line 136
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table10.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table10.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table10.AddRow(new string[] {
                        "UserName",
                        "james"});
            table10.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 137
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table10, "Given ");
#line 144
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 145
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 146
 testRunner.When("the client gets the project by header location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then(string.Format("the saved project matches the inputs for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "Name",
                        "Test Project Edited"});
            table11.AddRow(new string[] {
                        "Description",
                        "Test Description Edited"});
            table11.AddRow(new string[] {
                        "UserName",
                        "james"});
            table11.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 148
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table11, "Given ");
#line 154
 testRunner.When(string.Format("the client puts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
 testRunner.Then("a BadRequest status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Put project where IsUrgent is missing returns bad request - V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void PutProjectWhereIsUrgentIsMissingReturnsBadRequest_V2_V2()
        {
            this.PutProjectWhereIsUrgentIsMissingReturnsBadRequest_V2("V2", ((string[])(null)));
        }
        
        public virtual void PutProjectByWrongUserReturnsNotFound_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put project by wrong user returns not found - All Versions", exampleTags);
#line 160
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table12.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table12.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table12.AddRow(new string[] {
                        "UserName",
                        "james"});
            table12.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 161
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table12, "Given ");
#line 168
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 170
 testRunner.When("the client gets the project by header location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
 testRunner.Then(string.Format("the saved project matches the inputs for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Name",
                        "Test Project Edited"});
            table13.AddRow(new string[] {
                        "Description",
                        "Test Description Edited"});
            table13.AddRow(new string[] {
                        "IsUrgent",
                        "False"});
            table13.AddRow(new string[] {
                        "UserName",
                        "john"});
            table13.AddRow(new string[] {
                        "Password",
                        "john2013"});
#line 172
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table13, "Given ");
#line 179
 testRunner.When(string.Format("the client puts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.Then("a NotFound status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Put project by wrong user returns not found - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void PutProjectByWrongUserReturnsNotFound_AllVersions_V1()
        {
            this.PutProjectByWrongUserReturnsNotFound_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Put project by wrong user returns not found - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void PutProjectByWrongUserReturnsNotFound_AllVersions_V2()
        {
            this.PutProjectByWrongUserReturnsNotFound_AllVersions("V2", ((string[])(null)));
        }
        
        public virtual void DeleteProjectRemovesProjectFromDatabase_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete project removes project from database - All Versions", exampleTags);
#line 186
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table14.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table14.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table14.AddRow(new string[] {
                        "UserName",
                        "james"});
            table14.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 187
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table14, "Given ");
#line 194
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 196
 testRunner.When("the client gets the project by header location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 197
 testRunner.Then(string.Format("the saved project matches the inputs for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "UserName",
                        "james"});
            table15.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 198
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table15, "Given ");
#line 202
 testRunner.When("the client issues delete for the save project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 203
 testRunner.Then("a NoContent status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
 testRunner.When("the client gets the project by ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 205
 testRunner.Then("a NotFound status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete project removes project from database - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void DeleteProjectRemovesProjectFromDatabase_AllVersions_V1()
        {
            this.DeleteProjectRemovesProjectFromDatabase_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete project removes project from database - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void DeleteProjectRemovesProjectFromDatabase_AllVersions_V2()
        {
            this.DeleteProjectRemovesProjectFromDatabase_AllVersions("V2", ((string[])(null)));
        }
        
        public virtual void DeleteProjectByWrongUserReturnsNotFound_AllVersions(string version, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete project by wrong user returns not found - All Versions", exampleTags);
#line 211
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "Name",
                        "Test Project"});
            table16.AddRow(new string[] {
                        "Description",
                        "Test Description"});
            table16.AddRow(new string[] {
                        "IsUrgent",
                        "True"});
            table16.AddRow(new string[] {
                        "UserName",
                        "james"});
            table16.AddRow(new string[] {
                        "Password",
                        "james2013"});
#line 212
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table16, "Given ");
#line 219
 testRunner.When(string.Format("the client posts the inputs to the website for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.Then("a Created status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 221
 testRunner.When("the client gets the project by header location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
 testRunner.Then(string.Format("the saved project matches the inputs for {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "UserName",
                        "john"});
            table17.AddRow(new string[] {
                        "Password",
                        "john2013"});
#line 223
 testRunner.Given("the following project inputs and authentication", ((string)(null)), table17, "Given ");
#line 227
 testRunner.When("the client issues delete for the save project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
 testRunner.Then("a NotFound status should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete project by wrong user returns not found - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V1")]
        public virtual void DeleteProjectByWrongUserReturnsNotFound_AllVersions_V1()
        {
            this.DeleteProjectByWrongUserReturnsNotFound_AllVersions("V1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete project by wrong user returns not found - All Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Projects API")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "V2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Version", "V2")]
        public virtual void DeleteProjectByWrongUserReturnsNotFound_AllVersions_V2()
        {
            this.DeleteProjectByWrongUserReturnsNotFound_AllVersions("V2", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
